#(十五)、k8s部署 LNMP
1、建存储目录
[root@master-1 nfs]# vim  /etc/exports
/nfs *(rw,no_root_squash,no_all_squash,sync)


[root@master-1 nfs]# mkdir -p /nfs/pv{1..5} 
[root@master-1 nfs]# ll
total 0
drwxr-xr-x 3 root root 21 Nov 23 02:34 data
drwxr-xr-x 2 root root  6 Nov 23 17:14 pv1
drwxr-xr-x 2 root root  6 Nov 23 17:14 pv2
drwxr-xr-x 2 root root  6 Nov 23 17:14 pv3
drwxr-xr-x 2 root root  6 Nov 23 17:14 pv4
drwxr-xr-x 2 root root  6 Nov 23 17:20 pv5

[root@master-1 gitlab]# exportfs -r
[root@master-1 gitlab]# exportfs
/nfs_dir/vol1   172.16.201.0/24
/nfs_dir/vol2   172.16.201.0/24
/nfs_dir/vol3   172.16.201.0/24
/nfs_dir/vol4   172.16.201.0/24

节点mount上
[root@node-1 ~]#  mount -t nfs 172.16.201.134:/nfs  /nfs
[root@node-1 ~]# df -h|grep 172.16.201.134
172.16.201.134:/nfs_dir/vol1       17G  9.3G  7.8G  55% /nfs_dir/vol1
172.16.201.134:/nfs_dir/vol2       17G  9.3G  7.8G  55% /nfs_dir/vol2
172.16.201.134:/nfs_dir/vol3       17G  9.3G  7.8G  55% /nfs_dir/vol3
172.16.201.134:/nfs_dir/vol4       17G  9.3G  7.8G  55% /nfs_dir/vol4
172.16.201.134:/nfs/data/jenkins   17G  9.3G  7.8G  55% /nfs/data/jenkins
172.16.201.134:/nfs                17G  9.3G  7.8G  55% /nfs

[root@node-2 ~]#  mount -t nfs 172.16.201.134:/nfs  /nfs
[root@node-2 ~]# df -h|grep 172.16.201.134
172.16.201.134:/nfs_dir/vol1       17G  9.3G  7.8G  55% /nfs_dir/vol1
172.16.201.134:/nfs_dir/vol2       17G  9.3G  7.8G  55% /nfs_dir/vol2
172.16.201.134:/nfs_dir/vol3       17G  9.3G  7.8G  55% /nfs_dir/vol3
172.16.201.134:/nfs_dir/vol4       17G  9.3G  7.8G  55% /nfs_dir/vol4
172.16.201.134:/nfs/data/jenkins   17G  9.3G  7.8G  55% /nfs/data/jenkins
172.16.201.134:/nfs                17G  9.3G  7.8G  55% /nfs


2、建pv
[root@master-1 lnmp]# vim pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv0001
spec:
  capacity:            
    storage: 1Gi
  volumeMode: Filesystem  
  accessModes:           
  - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs                
  nfs:
    path: /nfs/pv1
    server: 172.16.201.134
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv0002
spec:
  capacity:            
    storage: 2Gi
  volumeMode: Filesystem  
  accessModes:           
  - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs
  nfs:
    path: /nfs/pv2
    server: 172.16.201.134
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv0003
spec:
  capacity:            
    storage: 3Gi
  volumeMode: Filesystem  
  accessModes:           
  - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs-mysql
  nfs:
    path: /nfs/pv3
    server: 172.16.201.134
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv0004
spec:
  capacity:            
    storage: 5Gi
  volumeMode: Filesystem  
  accessModes:           
  - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs-nginx
  nfs:
    path: /nfs/pv4
    server: 172.16.201.134
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv0005
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs-php
  nfs:
    path: /nfs/pv5
    server: 172.16.201.134


[root@master-1 lnmp]# kubectl apply -f pv.yaml
persistentvolume/pv0001 created
persistentvolume/pv0002 created
persistentvolume/pv0003 created
persistentvolume/pv0004 created
persistentvolume/pv0005 created

[root@master-1 lnmp]# kubectl get pv
NAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE
pv0001   1Gi        RWX            Retain           Available           nfs                     13s
pv0002   2Gi        RWX            Retain           Available           nfs                     13s
pv0003   3Gi        RWX            Retain           Available           nfs-mysql               13s
pv0004   5Gi        RWX            Retain           Available           nfs-nginx               13s
pv0005   5Gi        RWX            Retain           Available           nfs-php                 13s
[root@master-1 lnmp]# 

3、建storageclass
[root@master-1 lnmp]# vim  storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs
provisioner: kubernetes.io/nfs
reclaimPolicy: Retain
parameters:
  archiveOnDelete: "false"
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-nginx
provisioner: kubernetes.io/nfs
reclaimPolicy: Retain
parameters:
  archiveOnDelete: "false"
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-php
provisioner: kubernetes.io/nfs
reclaimPolicy: Retain
parameters:
  archiveOnDelete: "false"
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-mysql
provisioner: kubernetes.io/nfs
reclaimPolicy: Retain
parameters:
  archiveOnDelete: "false"

[root@master-1 lnmp]# kubectl apply -f storageclass.yaml 
storageclass.storage.k8s.io/nfs created
storageclass.storage.k8s.io/nfs-nginx created
storageclass.storage.k8s.io/nfs-php created
storageclass.storage.k8s.io/nfs-mysql created

[root@master-1 lnmp]# kubectl get storageclass
NAME        PROVISIONER         RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE
nfs         kubernetes.io/nfs   Retain          Immediate           false                  14s
nfs-mysql   kubernetes.io/nfs   Retain          Immediate           false                  14s
nfs-nginx   kubernetes.io/nfs   Retain          Immediate           false                  14s
nfs-php     kubernetes.io/nfs   Retain          Immediate           false                  14s

4、建secret
[root@master-1 lnmp]# kubectl create secret generic mysql-pass --from-literal=password=123456
secret/mysql-pass created

[root@master-1 lnmp]# kubectl get secret
NAME                  TYPE                                  DATA   AGE
db-user-pass          Opaque                                2      3d1h
default-token-q94x6   kubernetes.io/service-account-token   3      4d5h
mysql-pass            Opaque                                1      17s
[root@master-1 lnmp]# 

5、建deploy
[root@master-1 lnmp]# vim mysql-deployment.yaml
apiVersion: v1
kind: Service
metadata:
  name: blog-mysql
  labels:
    app: blog-mysql
spec:
  ports:
    - port: 3306
  selector:
    app: blog-mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: nfs-mysql
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 3Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blog-mysql
spec:
  selector:
    matchLabels:
      app: blog-mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: blog-mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.6
        imagePullPolicy: IfNotPresent
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports: 
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

[root@master-1 lnmp]# kubectl apply -f mysql-deployment.yaml
service/blog-mysql created
persistentvolumeclaim/mysql-pv-claim created
deployment.apps/blog-mysql created

[root@master-1 lnmp]# kubectl get pods
NAME                          READY   STATUS    RESTARTS   AGE
blog-mysql-5cb7fd64f8-mx9x9   1/1     Running   0          6s

6、#做个php:0.1景象，内部安装扩展
建Dockerfile：
[root@master-1 v0]# vim Dockerfile           
FROM php:7.4-fpm
WORKDIR /app
COPY index.php /app
RUN /usr/local/bin/docker-php-ext-install pdo_mysql
RUN /usr/local/bin/docker-php-ext-install mysqli

打包
[root@master-1 v0]# docker build . -t php:0.1
...............
PATH="$PATH:/sbin" ldconfig -n /usr/src/php/ext/mysqli/modules
----------------------------------------------------------------------
Libraries have been installed in:
   /usr/src/php/ext/mysqli/modules

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the `LD_RUN_PATH' environment variable
     during linking
   - use the `-Wl,--rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to `/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------

Build complete.
Don't forget to run 'make test'.

+ strip --strip-all modules/mysqli.so
Installing shared extensions:     /usr/local/lib/php/extensions/no-debug-non-zts-20190902/
Installing header files:          /usr/local/include/php/
find . -name \*.gcno -o -name \*.gcda | xargs rm -f
find . -name \*.lo -o -name \*.o | xargs rm -f
find . -name \*.la -o -name \*.a | xargs rm -f
find . -name \*.so | xargs rm -f
find . -name .libs -a -type d|xargs rm -rf
rm -f libphp.la      modules/* libs/*
Removing intermediate container d51e033928f1
 ---> 28a7fc339081
Successfully built 28a7fc339081
Successfully tagged php:0.1



7、建nginx的configmap
[root@master-1 v2]# vim configmap.yaml
kind: ConfigMap # 对象类型
apiVersion: v1 # api 版本
metadata: # 元数据
  name: nginx-config # 对象名称
data: # key-value 数据集合
  nginx.conf: | # 将 nginx config 配置写入 ConfigMap 中，经典的 php-fpm 代理设置，这里就不再多说了
    events {
    }
    http {
      server {
        listen 80 default_server;
        listen [::]:80 default_server;
        root /var/www/html;
        index index.php;
        server_name _;
        location / {
          try_files $uri $uri/ =404;
        }
        location ~ \.php$ {
          include fastcgi_params;
          fastcgi_param REQUEST_METHOD $request_method;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          fastcgi_pass 127.0.0.1:9000;
        }
      }
    }
[root@master-1 v2]# 

8、建nginx的deployment、service
[root@master-1 v2]# cat php-fpm-nginx-deployment-and-service.yaml
kind: Deployment # 对象类型
apiVersion: apps/v1 # api 版本
metadata: # 元数据
  name: php-fpm-nginx # Deployment 对象名称
spec: # Deployment 对象规约
  selector: # 选择器
    matchLabels: # 标签匹配
      app: php-fpm-nginx
  replicas: 1 # 副本数量
  template: # 模版
    metadata: # Pod 对象的元数据
      labels: # Pod 对象的标签
        app: php-fpm-nginx
    spec: # Pod 对象规约
      containers: # 这里设置了两个容器
        - name: php-fpm # 第一个容器名称
          image: php:0.1 # 容器镜像
          ports:
            - containerPort: 9000 # php-fpm 端口
          volumeMounts: # 挂载数据卷
            - mountPath: /var/www/html # 挂载两个容器共享的 volume 
              name: nginx-www
          lifecycle: # 生命周期
            postStart: # 当容器处于 postStart 阶段时，执行一下命令
              exec:
                command: ["/bin/sh", "-c", "cp -r /app/. /var/www/html"] # 将 /app/index.php 复制到挂载的 volume 
        - name: nginx # 第二个容器名称
          image: nginx # 容器镜像
          ports:
            - containerPort: 80 # nginx 端口
          volumeMounts: # nginx 容器挂载了两个 volume，一个是与 php-fpm 容器共享的 volume，另外一个是配置了 nginx.conf 的 volume
            - mountPath: /var/www/html # 挂载两个容器共享的 volume 
              name: nginx-www
            - mountPath: /etc/nginx/nginx.conf #  挂载配置了 nginx.conf 的 volume
              subPath: nginx.conf
              name: nginx-config
      volumes:
        - name: nginx-www # 这个 volume 是 php-fpm 容器 和 nginx 容器所共享的，两个容器都 volumeMounts 了
          emptyDir: {}
        - name: nginx-config 
          configMap: # 有人好奇，这里为啥可以将 configMap 对象通过 volumeMounts 的方式注入到容器中呢，因为本质上 configMap 是一类特殊的 volume
            name: nginx-config
---
kind: Service # 对象类型
apiVersion: v1 # api 版本
metadata: # 元数据
  name: php-fpm-nginx
spec:
  selector:
    app: php-fpm-nginx
  ports:
    - port: 80 
      targetPort: 80 # Service 将 nginx 容器的 80 端口暴露出来
  type: NodePort
[root@master-1 v2]# 

执行：
[root@master-1 v2]# kubectl apply -f php-fpm-nginx-deployment-and-service.yaml
php-fpm-nginx created
查看：
[root@master-1 v2]# kubectl get pod  
NAME                             READY   STATUS    RESTARTS   AGE
blog-mysql-5cb7fd64f8-qlksz      1/1     Running   0          6h53m
php-fpm-nginx-5fdcb6c57d-7v2pb   2/2     Running   0          62s





[root@master-1 lnmp]# kubectl get pv,pvc
NAME                      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM                    STORAGECLASS   REASON   AGE
persistentvolume/pv0001   1Gi        RWX            Retain           Available                            nfs                     61m
persistentvolume/pv0002   2Gi        RWX            Retain           Available                            nfs                     61m
persistentvolume/pv0003   3Gi        RWX            Retain           Bound       default/mysql-pv-claim   nfs-mysql               61m
persistentvolume/pv0004   5Gi        RWX            Retain           Bound       default/nginx-pv-claim   nfs-nginx               24m
persistentvolume/pv0005   5Gi        RWX            Retain           Bound       default/php-pv-claim     nfs-php                 61m

NAME                                   STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE
persistentvolumeclaim/mysql-pv-claim   Bound    pv0003   3Gi        RWX            nfs-mysql      50m
persistentvolumeclaim/nginx-pv-claim   Bound    pv0004   5Gi        RWX            nfs-nginx      18m
persistentvolumeclaim/php-pv-claim     Bound    pv0005   5Gi        RWX            nfs-php        3m30s
[root@master-1 lnmp]# 


9、查找代码路径：节点在node-1上

[root@node-1 wordpress]#  docker ps -a|grep php
c4b2f6c24a04        nginx                                               "/docker-entrypoint.…"   11 minutes ago      Up 11 minutes                                 k8s_nginx_php-fpm-nginx-5fdcb6c57d-jjtgr_default_2bedd26d-96ba-48ab-ad99-484b32a3bdf4_0
a469d1feccb9        3f4e80124011                                        "docker-php-entrypoi…"   12 minutes ago      Up 12 minutes                                 k8s_php-fpm_php-fpm-nginx-5fdcb6c57d-jjtgr_default_2bedd26d-96ba-48ab-ad99-484b32a3bdf4_0
9e80ecebfd33        registry.aliyuncs.com/google_containers/pause:3.2   "/pause"                 12 minutes ago      Up 12 minutes                                 k8s_POD_php-fpm-nginx-5fdcb6c57d-jjtgr_default_2bedd26d-96ba-48ab-ad99-484b32a3bdf4_0

直接进本地目录：
[root@node-1 nginx-www]# docker inspect fa9dd6e943c1|grep nginx-www
                "/var/lib/kubelet/pods/46e72359-61d8-4540-a834-80c16244b12f/volumes/kubernetes.io~empty-dir/nginx-www:/var/www/html",
                "Source": "/var/lib/kubelet/pods/46e72359-61d8-4540-a834-80c16244b12f/volumes/kubernetes.io~empty-dir/nginx-www",
[root@node-1 nginx-www]# 


[root@node-1 nginx-www]#cd /var/lib/kubelet/pods/46e72359-61d8-4540-a834-80c16244b12f/volumes/kubernetes.io~empty-dir/nginx-www/
[root@node-1 nginx-www]# ll
total 8
-rw-r--r-- 1 root root  3 Nov 25 11:45 index.html
-rw-r--r-- 1 root root 24 Nov 25 10:11 index.php


11、下载wordpress中文版：
[root@node-1 nginx-www]# wget https://cn.wordpress.org/latest-zh_CN.zip
--2021-11-25 12:50:30--  https://cn.wordpress.org/latest-zh_CN.zip
Resolving cn.wordpress.org (cn.wordpress.org)... 198.143.164.252
Connecting to cn.wordpress.org (cn.wordpress.org)|198.143.164.252|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 17270810 (16M) [application/zip]
Saving to: ‘latest-zh_CN.zip’

100%[=====================================================================================================================================================>] 17,270,810  2.65MB/s   in 7.0s   

2021-11-25 12:50:40 (2.36 MB/s) - ‘latest-zh_CN.zip’ saved [17270810/17270810]

[root@node-1 nginx-www]# 


11、复制代码：
[root@node-1 nginx-www]#cp /nfs/wordpress-5.4-zh_CN.zip /var/lib/kubelet/pods/2bedd26d-96ba-48ab-ad99-484b32a3bdf4/volumes/kubernetes.io~empty-dir/nginx-www/

[root@node-1 nginx-www]#cd /var/lib/kubelet/pods/2bedd26d-96ba-48ab-ad99-484b32a3bdf4/volumes/kubernetes.io~empty-dir/nginx-www/
[root@node-1 nginx-www]#unzip wordpress-5.4-zh_CN.zip
[root@node-1 nginx-www]#chmod -R 777 wordpress

12、建立数据库
[root@master-1 v1]# kubectl exec -it blog-mysql-5cb7fd64f8-qlksz  -- bash
root@blog-mysql-5cb7fd64f8-qlksz:/# 
root@blog-mysql-5cb7fd64f8-qlksz:/# mysql -uroot -p123456
Warning: Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1
Server version: 5.6.51 MySQL Community Server (GPL)

Copyright (c) 2000, 2021, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> create database wp;
Query OK, 1 row affected (0.01 sec)

mysql> grant all on wp.* to 'root'@'%' identified by '123456';
Query OK, 0 rows affected (0.01 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.00 sec)

mysql> 

13、访问：
http://172.16.201.134:32321/wordpress/wp-admin/

14、数据库信息参考下面：
wp
root
123456
blog-mysql

15、访问：
http://172.16.201.134:32321/wordpress/wp-admin/



